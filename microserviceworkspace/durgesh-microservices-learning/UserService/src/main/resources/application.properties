spring.application.name=user-service
server.port=8080

spring.datasource.url = jdbc:mysql://localhost:3306/microservices
spring.datasource.username = root
spring.datasource.password = root
#spring.datasource.initialization-mode=always

#dialect used to maintain version of the database ,read it on google to clarify
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true


#Eureka properties
eureka.instance.prefer-ip-address=true
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka



#actuators configuration
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include= health
management.endpoint.health.show-details=always

#management.endpoint.health.enabled=true
#management.endpoints.enabled-by-default=true


#resilience4j configurations
resilience4j.circuitbreaker.instances.ratingHotelBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.ratingHotelBreaker.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.ratingHotelBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.ratingHotelBreaker.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.ratingHotelBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.ratingHotelBreaker.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.ratingHotelBreaker.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.ratingHotelBreaker.sliding-window-size=3
resilience4j.circuitbreaker.instances.ratingHotelBreaker.sliding-window-type=COUNT_BASED

#sample-api is name given at api in retry annonation @retry(name="sample-api")
resilience4j.retry.instances.ratingHotelService.max-attempts=5

#to add time suration between each retry
resilience4j.retry.instances.ratingHotelService.wait-duration=3s

#time duration will be increased exponentially
resilience4j.retry.instances.ratingHotelService.enable-exponential-backoff=true

#ratelimiter configuration
resilience4j.ratelimiter.instances.userRateLimiter.limit-refresh-period=2s
resilience4j.ratelimiter.instances.userRateLimiter.limit-for-period=2
resilience4j.ratelimiter.instances.userRateLimiter.timeout-duration=2s

